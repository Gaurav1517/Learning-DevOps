############### HELM ###############
REF:
	https://helm.sh/
	https://helm.sh/docs/

Helm is a package manger for Kubernetes

Think of it like apt for ubuntu or yum for CentOS  but for Kubernetes. It helps you:
	Install application easily
	Manage application version
	Automate Kubernetes deployment using Helm charts (predefined template)
 for example, instead of manually creating multiple k8s  YAML files, you can use a Helm chart to deploy an entire app with a single command
	helm install myapp <<chart-name>>

Helm installation

wget https://get.helm.sh/helm-v3.17.2-linux-amd64.tar.gz
ls
tar -xzvf helm-v3.17.2-linux-amd64.tar.gz
ls
To check binary 
which bash
# either in /usr/bin OR /bin 
cp  linux-amd64/helm /usr/bin/helm
Check helm version
helm version


helm help
helm --help

Create helm chart
helm create <chart-name>
See the file structure of the helm chart with tree command. 
tree
.
â””â”€â”€ my-first-chart
    â”œâ”€â”€ charts
    â”œâ”€â”€ Chart.yaml
    â”œâ”€â”€ templates
    â”‚Â Â  â”œâ”€â”€ deployment.yaml
    â”‚Â Â  â”œâ”€â”€ _helpers.tpl
    â”‚Â Â  â”œâ”€â”€ hpa.yaml
    â”‚Â Â  â”œâ”€â”€ ingress.yaml
    â”‚Â Â  â”œâ”€â”€ NOTES.txt
    â”‚Â Â  â”œâ”€â”€ serviceaccount.yaml
    â”‚Â Â  â”œâ”€â”€ service.yaml
    â”‚Â Â  â””â”€â”€ tests
    â”‚Â Â      â””â”€â”€ test-connection.yaml
    â””â”€â”€ values.yaml

4 directories, 10 files

1. Root Directory (my-first-chart/)
This is the Helm Chart directory containing all the necessary files for deploying the application . 

2. Chart.yaml (Chart Metadata)
This files contains metadata about the Helm chart, like name, description, version, and dependencies.
eg. 
	apiVersion: v2
	name: my-first-chart
	description: A Helm chart for deploying a web application 
	version: 1.0.0
	appVersion: 1.0.0

ðŸ“ŒUse Case : Defines the chart details and ensures version control. 

3. values.yaml  (Configuration file)
This file contains customizable values like replicas, image versions, ports, and environment variables. 
eg. 
	replicaCount: 2
	image: 
		repository: nginx
		tag: latest
	service:
		type: ClusterIP
		port: 80

ðŸ“Œ Use Case: Allow users to override default configuration during deployment. 

4. templates/ (Kubernetes Manifest Templates)
This folder contains templated k8s  manifests that define how resources (Deployments Services, etc) are created. 

a) deployment.yaml (Deploying the Application)
Defines the Deployment resource.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
     matchLabels:
        app: my-app
  template:
     metadata:
	labels:
	app: my-app
     spec:
	containers:
	  - name: my-app
	    image: "{{ .Values.image.repsitory }}:{{ .Values.image.tag }}"

ðŸ“Œ Use Case: Deploys the app with the image and replicas count from values.yaml 

b) _helpers.tpl (Reusable Template Helpers)
Defines reusable template functions, like common labels.
ðŸ“Œ Use Case: Helps in writing cleaner, reusable templates.

c) hpa.yaml (Horizontal Pod Autoscaler)
Defines the HPA resource to scale pods automatically based on CPU/memory usage.

ðŸ“Œ Use Case: Ensures the app scales dynamically.

d) ingress.yaml (Ingress Configuration)
Defines the Ingress resource for exposing the application externally.

ðŸ“Œ Use Case: Allows external traffic to reach the application via a domain name.

e) service.yaml (Service Definition)
Defines a Service to expose the application.

ðŸ“Œ Use Case: Provides stable networking for the app inside Kubernetes.

f) serviceaccount.yaml (Service Account)
Defines a ServiceAccount if the app needs specific Kubernetes permissions.

ðŸ“Œ Use Case: Assigns permissions to workloads running in the cluster.

g) NOTES.txt (Post-Install Instructions)
Contains instructions displayed after helm install.

ðŸ“Œ Use Case: Helps users understand what to do after installation.

h) tests/test-connection.yaml (Test Connection)
A test manifest for verifying that the deployment works correctly.

ðŸ“Œ Use Case: Ensures the application is accessible after deployment.

5. charts/ (Subcharts)
This directory holds dependent charts (if any).

ðŸ“Œ Use Case: Helps bundle dependencies like databases (e.g., PostgreSQL) alongside the main chart.


Create release
helm install  <release> <chart>
helm install project-test  my-first-chart
helm install - the command to deploy a Helm chart.
< release> - the name you want to give to this deployment (release name)
<chart> - the name of the helm chart you want to install 
To check release 
helm list

Let's create your template
Firstly remove all file from the my-first-chart/templates/
rm -rf templates/

vim deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-deployment
  labels:
    project: test
spec:
  replicas: 3
  selector:
    matchLabels:
      project: test
  template:
    metadata:
      labels:
        project: test
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

vim service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-service
spec:
  selector:
    project: test
  ports:
   - protocol: TCP
     port: 80
     targetPort: 9376

helm install test-project my-first-chart
Check 
kubectl get deployment,rs,pod
kubectl get svc

my-first/chart/values.yaml
deployment:
  name: test-project
  image: nginx:1.14.2
  replica: 3

service:
  name: test-project

Second project my-first-chart/values.yaml
deployment:
  name: helm-project-03
  image: nginx:1.14.2
  replica: 5

service:
  name: helm-project-03 

helm install helm-project-03  my-first-chart
# Check all existing helm release 
helm list 
helm list -A

To uninstall release
helm uninstall <releae-name>

To upgrade  or make any changes in the template files
vim deployment
replicas: 3  to replicas: 6

helm upgrade test-project my-first-chart
kubectl get deployments.apps,replicasets.apps,pod

helm list # to check release


Summary:
To create chart
helm create <char-name> 
To create release
helm install <release-name> <chart-name>
to check release
helm list
to upgrade release
helm upgrade <release-name> <char-name>
to check release history
helm history <release-name>
To uninstall release
helm uninstall <release-name> <chart-name>

######################################
Helm upgrade and version v1 to v2 using --set attribute

Create chart
helm create mychart
Create release
helm install release-01 mychart
Check release
helm list --output=yaml
helm list

Check the pod image
 kubectl describe pod release-01-mychart-67bb57897f-drrxj | grep -i "image:"
    Image:          nginx:1.16.0

Upgrade the image using --set attribute
helm upgrade release-01 mychart --set "image.tag=1.20.0"
helm list 
helm history release-01

Verify the pod image.
kubectl describe  pod release-01-mychart-88bbc5fcb-stkrz | grep -i "image:"
    Image:          nginx:1.20.0

Upgrade version using chart.
to get artifact  
https://artifacthub.io/

to add repositories
helm repo add bitnami https://charts.bitnami.com/bitnami

to check repo
helm repo list

to search chart inside repo
helm search repo

to see all versions of the chart repo
helm search repo <repo-name> --versions

to create release:latest of the repo chart 
helm install <release-name> bitnami/nginx

to create release:16.0.3 particular version of the repo chart 
helm install <release-name> bitnami/nginx --version "16.0.3"

to pull particular version repository
helm pull oci://registry-1.docker.io/bitnamicharts/nginx --version "19.0.3"

ls
tar -xzvf nginx-19.0.3.tgz

ls
helm install paticular-version nginx..

to check status of release
helm status newone

to check status of release detailed. 
helm status newone --show-resources

search repo with name
helm search repo bitnami/nignx

serach repo with name versions
helm search repo bitnami/nginx --versions

upgrade chart vesion
helm upgrade newone bitnami/nginx --version "13.2.1"

check status or release
helm status newone
helm status newone | grep -i "chart version:"


helm list
helm history newone

to rollback previous version chart
helm rollback newone 

To rollback particular version chart with revision no.
helm rollback newone 1


#########################################
lec 7 uninstall release using --keep-history attribute

Check repo 
helm repo list

Create new release 
helm install newone bitnami/nginx --version "12.0.1"

list release
helm list

Check status of release resources
helm status newone --show-resources

Upgrade the release
helm upgrade newone bitnami/nginx --version "15.0.1"
helm upgrade newone bitnami/nginx --version "16.0.1"

list in yaml fmt
helm list --output=yaml 

Check history of release 
helm history newone 

uninstall with --keep-history attribute to save the history for future 
helm uninstall newone --keep-history 
check in installed list 
helm list 
check in uninstalled list
helm list --uninstalled

Let's check by creating new release
helm install newtwo bitnami/nginx

to rollback from uninstalled list & and it also show in installed list
helm rollback newone 3

###############################################
lect 8 Helm install using --generate-name flat attribute 

Add repo
helm repo add bitnami https://charts.bitnami.com/bitnami
Check repo 
helm repo list
Check versions 
helm search repo bitnami --versions

Create release with --generate-name  attribute
helm install bitnami/nginx --generate-name

Check release name
helm list

To generate unique name for release
helm install bitnami/nginx --generate-name --name-template "devapp-{{randAlpha 7 | lower }}"

helm list
helm

Check resources status
helm status devapp-devapp-zwnthwa --show-resources

lec 9 Helm to install using --atomic, --wait --timeout attributes. 

--atomic  if set, the installation process deletes the installation on failure, the --wait flag will be set automatically if --atomic is used. 


helm install release-name repository/chart-name

If anything wrong in chart then it will create release but give error to avoid creation if any error in chart we user --atomic 
Let's make error manually in chart. 
	vim chart-name/values.yaml
	service:
	   type: ClusterIP
	   port-error: 80

	helm install release-name chart-name --atomic 
Output: 	
	Error: INSTALLATION FAILED : release release-name failed , and had been uninstalled  due to atomic being set: 2 error occurred:
		*  Service "release-name-chart-name" is invalid : spec.port[0] port: Invalid value 0 : must be between 1 and 65535, inclusive
		*  Deployment.apps "release-name-chart-name: is invalid : spec.template.spec.container[0].ports.containerPort: Required value. 

Fix the error and try to create new release. 
helm install release-name chart-name
helm list 
helm list --output=yaml

increase the replica in 
	vim chart-name/values.yaml 
		replicaCount: 3

helm upgrade release-name chart-name
helm list
helm history release-name
helm status release-name --show-resources 

update release 3  to 5  times to understand the --atomic  flag 

Let's do some syntactical error in chart like 
Let's make error manually in chart. 
	vim chart-name/values.yaml
	service:
	   type: ClusterIP
	   port-error: 80
and update the values.yaml 
	vim chart-name/values.yaml 
		replicaCount: 10

helm upgrade release-name chart-name 
it create release but in failed state. 
helm list
helm history release-name 

But if we use --atomic flag  it rollback to last revision upgrade. 
helm upgrade  release-name chart-name --atomic 
helm list 
helm history release-name 

When we use --atomic automatically --wait with default 300sec time flag is used. 

If we pull from registry it may take more than 300sec , so to increase the time use --timeout flag. 
helm install release-name chart-name --atomic --timeout 10m10s

###################################################

lec 10 
Helm --namespace flag

By default all resource create in "default" namespace which is default configured. 
Setting the namespace preference
kubectl config set-context --current --namespace=<insert-namespace-here>
# Validate it
kubectl config view --minify | grep namespaces:

for more info namespace refer: 
https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/



# Create chart
helm create chart-name
# Create release
helm install release-name chart-name 
# check release
helm list --output=yaml

# Create namespace 
kubectl create namespace <<namespace-name>>
# check namespace/ns
kubectl get ns 

# Create release in project namespace
helm install release-name chart-name --namespace <project-namespace>

# To check in project namespace
helm list -n <project-namespace>
OR
helm list --namespace <project-namespace>

# Create namespace while creating release
helm install release-name chart-name --namespace <project-02-namespace> --create-namespace

# Validate ns 
kubectl get ns

# check status in project-02 namespace
helm status release-name --show-resources --namespace <project-02-namespace 

# upgrade release in project-02 namespace
helm upgrade release-name chart-name --namespace <project-02-namespace>

# uninstall release in project-02 namespace
helm uninstall release-name chart-name --namespace <project-02-namespace>

# To delete namespace
kubectl delete ns <namespace-name>
# Validate 
kubectl get ns

##########################################################################################################
lec 11
Helm get command 

helm get --help 

Available commands:
all  download all information for a named release
hooks      download all the hooks for a named release
manifest   download the manifest for a named release
metadata  This command fetches metadata for a given release
notes       download the notes for a named release
values      download the values file for a named release


Create chart 
helm create chart-name
Create release
helm install release-name chart-name --atomic
list release
helm list --output=yaml 

Upgrade the release 
use --set attribute to override the default values define in chart-name/values.yaml file 
helm upgrade release-name chart-name --atomic --set "image.tag=1.14.0"
helm upgrade release-name chart-name --atomic --set replicaCount=10
helm upgrade release-name chart-name --atomic --set service.type=NodePort
helm upgrade release-name chart-name --atomic --set "image.tag=1.20.0"
helm upgrade release-name chart-name --atomic --set replicaCount=30

helm list 
helm history release-name 
#  to see change in every revision
helm get values release-name --revision 6
helm get values release-name --revision 5
helm get values release-name --revision 4
helm get values release-name --revision 3
helm get values release-name --revision 2
helm get values release-name --revision 1


# upgrade through custom values.yaml file 
for now just copy the values.yaml to custom-values.yaml 
cp chart-name/values.yaml  /root/
change in file 
	replicaCount: 40

        tag: 1.23.0
        service:
             type: NodePort

helm list 
helm upgrade  release-name chart-name -f /root/custom-values.yaml   
OR
helm upgrade  release-name chart-name --values /root/cusom-values.yaml

We can also override the values like this 
helm upgrade  release-name chart-name -f /root/custom-values.yaml --set "image.tag=1.24.0"

#Validate it
helm list
helm history release-name --output
helm get values release-name --revision 8 
helm status release-name --show-resources 

While upgrading/creation/status we get some NOTES
we get this NOTES from chart-name/template/NOTES.txt

	1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "mychart.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch its status by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "mychart.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "mychart.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "mychart.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

To get manifest file of the release
helm get manifest release-name 

To get metadata of the release
helm get metadata release-name 

To get hooks of the release
helm get hooks release-name 

To get all from release
helm get all release-name 


#################################################
Lecture 12
Helm Chart .helmignore, notes.txt, _helper.tpl 

While creating chart we get some hidden files
# Create chart
helm create chart-name

# Check all file including hidden 
ls -la mychart/
total 16
drwxr-xr-x. 4 root root   93 Apr  2 00:23 .
drwxr-xr-x. 3 root root   45 Apr  2 00:56 ..
drwxr-xr-x. 2 root root    6 Apr  2 00:21 charts
-rw-r--r--. 1 root root 1143 Apr  2 00:21 Chart.yaml
-rw-r--r--. 1 root root  349 Apr  2 00:21 .helmignore
drwxr-xr-x. 3 root root  162 Apr  2 00:21 templates
-rw-r--r--. 1 root root 4293 Apr  2 00:21 values.yaml


.helmignore

The .helmignore file is used in Helm charts to specify files and directories that should be excluded from being packaged when running the helm package command or when installing/upgrading a Helm release. It acts like .gitignore file , telling helm which files to ignore during packaging and deployment. 

Use case for .helmignore
	1. Excluding Deployement files. 
	2. Reducing Chart Size
	3. Preventing Sensitive Information from Being Packaged. 


vim mychart/.helmignore
# Patterns to ignore when building packages.
# This supports shell glob matching, relative path matching, and
# negation (prefixed with !). Only one pattern per line.
.DS_Store
# Common VCS dirs
.git/
.gitignore
.bzr/
.bzrignore
.hg/
.hgignore
.svn/
# Common backup files
*.swp
*.bak
*.tmp
*.orig
*~
# Various IDEs
.project
.idea/
*.tmproj
.vscode/


